name: Build and Deploy React App

on:
  workflow_call:
    inputs:
      s3-bucket-name:
        required: true
        type: string
      app-directory:
        required: false
        type: string
      aws-region:
        required: false
        type: string
        default: 'eu-central-1'
      deploy-target:
        required: false
        type: string
        default: 's3'
      ec2-app-tag:
        required: false
        type: string
      secret-name:
        required: false
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: npm run build

      - name: List build directory
        run: |
          echo "Listing contents of build directory..."
          ls -alh dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Deploy to S3
        if: inputs.deploy-target == 's3'
        run: |
          aws s3 sync dist/ s3://${{ inputs.s3-bucket-name }}/${{ inputs.app-directory }}/ --delete
          echo "App deployed to S3 at:"
          echo "http://${{ inputs.s3-bucket-name }}.s3-website.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.app-directory }}/"

      - name: Package React build for EC2
        if: inputs.deploy-target == 'ec2'
        run: |
          zip -r react-build.zip dist/

      - name: Upload React package to S3 (temporary storage)
        if: inputs.deploy-target == 'ec2'
        run: |
          aws s3 cp react-build.zip s3://${{ inputs.s3-bucket-name }}/${{ inputs.app-directory }}/react-build.zip

      - name: Retrieve EC2 Instance Info
        if: inputs.deploy-target == 'ec2'
        run: |
          EC2_INFO=$(aws ec2 describe-instances \
            --filters "Name=tag:App,Values=${{ inputs.ec2-app-tag }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].[InstanceId, PublicIpAddress]" \
            --output text)
          EC2_INSTANCE_ID=$(echo "$EC2_INFO" | awk '{print $1}')
          EC2_PUBLIC_IP=$(echo "$EC2_INFO" | awk '{print $2}')
          echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

      - name: Deploy React app to EC2 via SSM
        if: inputs.deploy-target == 'ec2'
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"aws s3 cp s3://${{ inputs.s3-bucket-name }}/${{ inputs.app-directory }}/react-build.zip /tmp/react-build.zip\",
              \"rm -rf /var/www/${{ inputs.app-directory }} && mkdir -p /var/www/${{ inputs.app-directory }}\",
              \"unzip /tmp/react-build.zip -d /var/www/${{ inputs.app-directory }}/\",
              \"chown -R www-data:www-data /var/www/${{ inputs.app-directory }}\"
            ]" \
            --timeout-seconds 600 \
            --region ${{ inputs.aws-region }} \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      - name: Wait for SSM Command Completion
        if: inputs.deploy-target == 'ec2'
        run: |
          aws ssm wait command-executed \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region ${{ inputs.aws-region }}

      - name: Verify EC2 Deployment (Log)
        if: inputs.deploy-target == 'ec2'
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region ${{ inputs.aws-region }}

      - name: Output EC2 URL
        if: inputs.deploy-target == 'ec2'
        run: |
          echo "React app deployed to EC2 at:"
          echo "http://${{ env.EC2_PUBLIC_IP }}/${{ inputs.app-directory }}/"
